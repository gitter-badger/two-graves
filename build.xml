<?xml version="1.0" ?>
<!-- 
The MIT License (MIT)

Copyright (c) 2014 Robert Winslow Dalpe

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<project name="barblich-module" basedir=".">
  <!-- BEGIN PROPERTY DEFINITIONS -->

  <property file="build.properties" />

  <!-- END PROPERTY DEFINITIONS -->



  <!-- BEGIN ADDITIONAL LIBRARIES AND CLASSPATH DEFINITIONS -->

  <path id="xslt2.classpath">
    <fileset dir="${lib}/${lib.tools}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${lib}/${lib.jing}/bin">
      <include name="*.jar" />
    </fileset>
  </path>

  <path id="validation.classpath">
    <fileset dir="${lib}/${lib.jing}">
      <include name="bin/*.jar" />
    </fileset>
  </path>

  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${lib}/${lib.ant-contrib}/${lib.ant-contrib.jar}" />
    </classpath>
  </taskdef>

  <!-- END ADDITIONAL LIBRARIES AND CLASSPATH DEFINITIONS -->



  <!-- BEGIN PUBLIC TARGETS -->

  <target name="build.all"
          description="Create all available output formats"
          depends="clean,validate,-do-build.html.single" />

  <target name="build.html.single"
          description="Create HTML output in a single file"
          depends="-clean.html.single,validate">
    <antcall target="-do-build.html.single" />
  </target>

  <target name="validate"
          description="Validate all DocBook documents"
          depends="getlibs,-clean.validation">
    <antcall target="-do-validate" />
  </target>

  <target name="clean" description="Remove all output and build artifacts">
    <delete dir="${outputdir}" />
  </target>

  <target name="cleanlibs" description="Remove all lib files that can be safely re-downloaded">
    <delete dir="${lib}/${lib.xslt2stylesheets}" />
    <delete file="${lib}/${lib.xslt2stylesheets.zip}" />

  </target>

  <target name="getlibs" description="Retrieve all necessary lib files for building">
    <mkdir dir="${lib}" />
    <get dest="${lib}/" src="${lib.xslt2stylesheets.url}" skipexisting="true" />
    <unzip dest="${lib}/" src="${lib}/${lib.xslt2stylesheets.zip}" overwrite="false" />
  </target>

  <!-- END PUBLIC TARGETS -->



  <!-- BEGIN PRIVATE TARGETS -->
  <!-- HTML.SINGLE -->
  <target name="-do-build.html.single">
    <foreach target="-build-one.html.single"
             param="toplevelBookName"
             list="${src.toplevel-books}" />
  </target>
  <target name="-build-one.html.single">
    <mkdir dir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />


    <java classpathref="xslt2.classpath" fork="true" classname="com.xmlcalabash.drivers.Main">
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
                   value="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                   value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
      <arg value="-oresult=${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}/index.html" />
      <arg value="-isource=${src}/${toplevelBookName}/${toplevelBookName}.xml" />
      <arg value="-pgenerate.meta.generator=0" />
      <arg value="-presource.root=http://docbook.github.com/latest/" />
      <arg value="-pdraft.mode=${draft}" />
      <arg value="-pdraft.watermark.image=draft.png" />
      <arg value="${lib}/${lib.xslt2stylesheets}/xslt/base/pipelines/docbook.xpl" />
    </java>

    <if>
      <equals arg1="yes" arg2="${draft}" />
      <then>
        <copy file="${lib}/${lib.docbook.stylesheets}/images/draft.png"
              todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />
      </then>
    </if>

    <copy file="${src}/${src.html.single.cssfiledir}/${src.html.single.cssfile}"
          todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />
    <copy file="${src}/${src.html.common.cssfiledir}/${src.html.common.cssfile}"
          todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />
    <copy file="${src}/${src.html.single.cssfiledir}/${src.html.single.printcssfile}"
          todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />
    <copy file="${src}/${src.html.common.cssfiledir}/${src.html.common.printcssfile}"
          todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />

  </target>
  <target name="-clean.html.single">
    <delete dir="${outputdir}/${outputdir.html}/${outputdir.html.single}/" />
  </target>

  <!-- VALIDATION -->
  <target name="-do-validate">
    <antcall target="createschematronvalidationsheet" />
    <foreach target="-validate-one" param="toplevelBookName" list="${src.toplevel-books}" />
  </target>

  <target name="createschematronvalidationsheet">
    <mkdir dir="${outputdir}/${outputdir.validation}" />

    <java classpathref="validation.classpath"
          failonerror="true"
          classname="com.icl.saxon.StyleSheet">
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
                   value="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                   value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
      <arg value="-o" />
      <arg value="${outputdir}/${outputdir.validation}/schematronvalidation.xsl" />
      <arg file="${lib}/${lib.docbook}/sch/docbook.sch" />
      <arg file="${lib}/${lib.schematron}/schematron-basic.xsl" />
    </java>
  </target>

  <target name="-validate-one">
    <mkdir dir="${outputdir}/${outputdir.validation}" />

    <java classpathref="validation.classpath"
          fork="true"
          failonerror="true"
          classname="com.thaiopensource.relaxng.util.Driver">
      <sysproperty key="javax.xml.parsers.DocumentBuilderFactory"
                   value="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
                   value="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                   value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
      <arg file="${lib}/${lib.docbook}/rng/docbook.rng" />
      <arg file="${src}/${toplevelBookName}/${toplevelBookName}.xml" />
    </java>

    <java classpathref="validation.classpath"
          failonerror="true"
          classname="com.icl.saxon.StyleSheet">
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
                   value="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                   value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
      <arg value="-o" />
      <arg value="${outputdir}/${outputdir.validation}/schematronerrors.txt" />
      <arg file="${src}/${toplevelBookName}/${toplevelBookName}.xml" />
      <arg file="${outputdir}/${outputdir.validation}/schematronvalidation.xsl" />
    </java>

    <fileset id="failure.file" file="${outputdir}/${outputdir.validation}/schematronerrors.txt">
      <size when="more" value="0" />
    </fileset>

    <echo />

    <if>
      <resourcecount when="greater" count="0" refid="failure.file" />
      <then>
        <echo>Schematron validation errors...</echo>
        <echo />
        <concat>
          <fileset refid="failure.file" />
        </concat>
        <fail message="Schematron validation errors..." />
      </then>
    </if>
  </target>
  <target name="-clean.validation">
    <delete dir="${outputdir}/${outputdir.validation}" />
  </target>

  <!-- END PRIVATE TARGETS -->
</project>