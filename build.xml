<?xml version="1.0" ?>
<!--

Copyright (C) 2014 Robert Winslow Dalpe

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

-->
<project name="two-graves" basedir="." default="build.all">
  <!-- BEGIN PROPERTY DEFINITIONS -->

  <property file="build.properties" />

  <!-- END PROPERTY DEFINITIONS -->



  <!-- BEGIN ADDITIONAL LIBRARIES AND CLASSPATH DEFINITIONS -->

  <path id="asciidoctorj.classpath">
    <fileset dir="${lib}/${lib.asciidoctorj}/lib">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="xslt2.classpath">
    <pathelement location="${lib}/${lib.tools}" />
    <fileset dir="${lib}/${lib.tools}/${lib.calabash}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib}/${lib.xslt2stylesheets-extensions}">
      <include name="**/*.jar" />
    </fileset>
    <pathelement location="${lib}/${lib.xslt2stylesheets-extensions}" />
  </path>

  <path id="xslt1.classpath">
    <fileset dir="${lib}/${lib.jing}/bin/">
      <include name="*.jar" />
    </fileset>
  </path>

  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${lib}/${lib.ant-contrib}/${lib.ant-contrib.jar}" />
    </classpath>
  </taskdef>

  <!-- END ADDITIONAL LIBRARIES AND CLASSPATH DEFINITIONS -->



  <!-- BEGIN PUBLIC TARGETS -->

  <target name="build.all"
          description="Create all available output formats"
          depends="clean,validate,-get-timestamp,-do-build.html.single,-do-build.pdf,-do-build.epub" />

  <target name="build.epub"
          description="Create EPUB output"
          depends="-clean.epub,validate,-get-timestamp,-do-build.epub" />

  <target name="build.html.single"
          description="Create HTML output in a single file"
          depends="-clean.html.single,validate,-get-timestamp,-do-build.html.single" />

  <target name="build.pdf"
          description="Create PDF output"
          depends="-clean.pdf,validate,-do-build.pdf" />

  <target name="validate"
          description="Validate all DocBook documents"
          depends="getlibs,-clean.validation,convert.asciidoc,-do-validate">
  </target>

  <target name="convert.asciidoc"
          description="Converts all asciidoc documents to DocBook format"
          depends="getlibs,-clean.docbook,-prepare.catalog,-prepare.glossary,-do-convert.asciidoc" />

  <target name="clean" description="Remove all output and build artifacts">
    <delete dir="${outputdir}" />
  </target>

  <target name="cleanlibs" description="Remove all lib files that can be safely re-downloaded">
    <delete dir="${lib}/${lib.xslt2stylesheets}" />
    <delete file="${lib}/${lib.xslt2stylesheets.zip}" />
    <delete dir="${lib}/${lib.xslt2stylesheets-extensions}" />
    <delete file="${lib}/${lib.xslt2stylesheets-extensions.zip}" />
    <delete dir="${lib}/${lib.jing}" />
    <delete file="${lib}/${lib.jing.zip}" />
    <delete dir="${lib}/${lib.tools}/${lib.calabash}" />
    <delete file="${lib}/${lib.calabash.zip}" />
    <delete dir="${lib}/${lib.fop}" />
    <delete file="${lib}/${lib.fop.zip}" />
    <delete dir="${lib}/${lib.asciidoctorj}" />
    <delete file="${lib}/${lib.asciidoctorj.zip}" />
  </target>

  <target name="getlibs" description="Retrieve all necessary lib files for building">
    <mkdir dir="${lib}" />
    <get dest="${lib}/" src="${lib.xslt2stylesheets.url}" skipexisting="true" />
    <unzip dest="${lib}/" src="${lib}/${lib.xslt2stylesheets.zip}" overwrite="false" />
    <get dest="${lib}/" src="${lib.xslt2stylesheets-extensions.url}" skipexisting="true" />
    <unzip dest="${lib}/" src="${lib}/${lib.xslt2stylesheets-extensions.zip}" overwrite="false" />
    <get dest="${lib}/" src="${lib.jing.url}" skipexisting="true" />
    <unzip dest="${lib}/" src="${lib}/${lib.jing.zip}" overwrite="false" />
    <get dest="${lib}/" src="${lib.asciidoctorj.url}" skipexisting="true" />
    <unzip dest="${lib}/" src="${lib}/${lib.asciidoctorj.zip}" overwrite="false" />
    <get dest="${lib}/" src="${lib.calabash.url}" skipexisting="true" />
    <unzip dest="${lib}/${lib.tools}" src="${lib}/${lib.calabash.zip}" overwrite="false" />
    <get dest="${lib}/" src="${lib.fop.url}" skipexisting="true" />
    <unzip dest="${lib}/" src="${lib}/${lib.fop.zip}" overwrite="false" />
    <chmod perm="u+x" file="${lib}/${lib.fop}/fop" />
  </target>

  <target name="release"
          description="Fully build the project and prepare for release"
          depends="build.all,-do.release" />
  <!-- END PUBLIC TARGETS -->



  <!-- BEGIN PRIVATE TARGETS -->
  <!-- HTML.SINGLE -->
  <target name="-do-build.html.single">
    <foreach target="-build-one.html.single"
             param="toplevelBookName"
             list="${src.toplevel-books}"
             inheritall="true" />
  </target>
  <target name="-build-one.html.single">
    <mkdir dir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />

    <java classpathref="xslt2.classpath" fork="true" classname="com.xmlcalabash.drivers.Main">
      <sysproperty key="xml.catalog.files" value="${lib}/prepared_catalog.xml" />
      <arg value="--entity-resolver=org.xmlresolver.Resolver" />
      <arg value="--uri-resolver=org.xmlresolver.Resolver" />
      <arg value="-oresult=${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}/index.html" />
      <arg value="-isource=${outputdir}/${outputdir.docbook}/${toplevelBookName}/${toplevelBookName}.xml" />
      <arg value="-pgenerate.meta.generator=0" />
      <arg value="-pdocbook.css=" />
      <arg value="-pdraft.mode=${draft}" />
      <arg value="-pdraft.watermark.image=draft.png" />
      <arg value="-phtml.stylesheets=slicknav.css commonhtmlstyle.css commonhtmlstyle-print.css singlehtmlstyle.css singlehtmlstyle-print.css" />
      <arg value="-phtml.scripts=https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js jquery.slicknav.js menu.js rotate-images.js" />
      <arg value="-puse.extensions=1" />
      <arg value="-poutput.dir=${basedir}/${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}/" />
      <arg value="-pNOW=${NOWSUB}" />
      <arg value="-pglossary.collection=urn:x-twograves:glossary" />
      <arg value="${lib}/${lib.xslt2stylesheets}/xslt/base/pipelines/docbook.xpl" />
      <arg value="syntax-highlighter=0" />
      <arg value="html-initial-stylesheet=${basedir}/${lib}/html-single-customizations.xsl" />
      <arg value="preprocess-params-file=${basedir}/${lib}/preprocess-params.xsl" />
    </java>

    <if>
      <equals arg1="yes" arg2="${draft}" />
      <then>
        <copy file="${lib}/${lib.docbook.stylesheets}/images/draft.png"
              todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />
      </then>
    </if>

    <copy todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}">
      <fileset dir="${lib}/${lib.slicknav}/" />
    </copy>
    <copy todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}">
      <fileset dir="${src}/${src.html.common.jsfiledir}" />
    </copy>
    <copy file="${src}/${src.html.single.cssfiledir}/${src.html.single.cssfile}"
          todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />
    <copy file="${src}/${src.html.common.cssfiledir}/${src.html.common.cssfile}"
          todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />
    <copy file="${src}/${src.html.single.cssfiledir}/${src.html.single.printcssfile}"
          todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />
    <copy file="${src}/${src.html.common.cssfiledir}/${src.html.common.printcssfile}"
          todir="${outputdir}/${outputdir.html}/${outputdir.html.single}/${toplevelBookName}" />

  </target>
  <target name="-clean.html.single">
    <delete dir="${outputdir}/${outputdir.html}/${outputdir.html.single}/" />
  </target>

  <!-- PDF -->
  <target name="-do-build.pdf">
    <foreach target="-build-one.pdf"
             param="toplevelBookName"
             list="${src.toplevel-books}"
             inheritall="true" />
  </target>
  <target name="-build-one.pdf">
    <mkdir dir="${outputdir}/${outputdir.fo}" />
    <mkdir dir="${outputdir}/${outputdir.pdf}" />
    <mkdir dir="${outputdir}/${outputdir.fo}/${toplevelBookName}" />
    <mkdir dir="${outputdir}/${outputdir.pdf}/${toplevelBookName}" />

    <java classpathref="xslt1.classpath"
          fork="true"
          failonerror="true"
          classname="com.icl.saxon.StyleSheet">
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
                   value="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                   value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
      <sysproperty key="xml.catalog.files" value="${lib}/prepared_catalog.xml" />
      <arg value="-r" />
      <arg value="org.apache.xml.resolver.tools.CatalogResolver" />
      <arg value="-x" />
      <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
      <arg value="-y" />
      <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
      <arg value="-o" />
      <arg value="${outputdir}/${outputdir.fo}/${toplevelBookName}/${toplevelBookName}.fo" />
      <arg file="${outputdir}/${outputdir.docbook}/${toplevelBookName}/${toplevelBookName}.xml" />
      <arg file="${lib}/fo-customizations.xsl" />
      <arg value="toc.indent.width=16" />
      <arg value="fop1.extensions=1" />
      <arg value="use.svg=1" />
      <arg value="email.delimiters.enabled=0" />
      <arg value="email.mailto.enabled=1" />
      <arg value="hyphenate=true" />
      <arg value="body.start.indent=0pt" />
      <arg value="draft.mode=${draft}" />
      <arg value="draft.watermark.image=draft.png" />
      <arg value="glossary.collection=urn:x-twograves:glossary" />
      <arg value="glossterm.auto.link=1" />
      <arg value="glossary.sort=1" />
    </java>

    <if>
      <equals arg1="yes" arg2="${draft}" />
      <then>
        <copy file="${lib}/${lib.docbook.stylesheets}/images/draft.png"
              todir="${outputdir}/${outputdir.fo}/${toplevelBookName}" />
      </then>
    </if>

    <if>
      <os family="windows" />
      <then>
        <exec resolveexecutable="true" executable="${lib}/${lib.fop}/fop.cmd">
          <arg value="-fo" />
          <arg value="${outputdir}/${outputdir.fo}/${toplevelBookName}/${toplevelBookName}.fo" />
          <arg value="-pdf" />
          <arg value="${outputdir}/${outputdir.pdf}/${toplevelBookName}/${toplevelBookName}.pdf" />
        </exec>
      </then>
      <else>
        <exec resolveexecutable="true" executable="${lib}/${lib.fop}/fop">
          <arg value="-fo" />
          <arg value="${outputdir}/${outputdir.fo}/${toplevelBookName}/${toplevelBookName}.fo" />
          <arg value="-pdf" />
          <arg value="${outputdir}/${outputdir.pdf}/${toplevelBookName}/${toplevelBookName}.pdf" />
        </exec>
      </else>
    </if>
  </target>
  <target name="-clean.pdf">
    <delete dir="${outputdir}/${outputdir.fo}/" />
    <delete dir="${outputdir}/${outputdir.pdf}/" />
  </target>

  <!-- EPUB -->
  <target name="-do-build.epub">
    <foreach target="-build-one.epub"
             param="toplevelBookName"
             list="${src.toplevel-books}"
             inheritall="true" />
  </target>
  <target name="-build-one.epub">
    <mkdir dir="${outputdir}/${outputdir.epub}/${toplevelBookName}" />
    <mkdir dir="${outputdir}/${outputdir.epub}/tmp/${toplevelBookName}" />

    <java classpathref="xslt1.classpath"
          fork="true"
          failonerror="true"
          classname="com.icl.saxon.StyleSheet">
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
                   value="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                   value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
      <sysproperty key="xml.catalog.files" value="${lib}/prepared_catalog.xml" />
      <arg value="-r" />
      <arg value="org.apache.xml.resolver.tools.CatalogResolver" />
      <arg value="-x" />
      <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
      <arg value="-y" />
      <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
      <arg file="${outputdir}/${outputdir.docbook}/${toplevelBookName}/${toplevelBookName}.xml" />
      <arg file="${lib}/epub-customizations.xsl" />
      <arg value="base.dir=${outputdir}/${outputdir.epub}/${toplevelBookName}/OEBPS/" />
      <arg value="chapter.autolabel=0" />
      <arg value="chunk.section.depth=3"/>
      <arg value="chunk.first.sections=1"/>
      <arg value="draft.mode=${draft}" />
      <arg value="draft.watermark.image=draft.png" />
      <arg value="docbook.css.link=0" />
      <arg value="html.stylesheet=epubstyle.css" />
      <arg value="NOW=${NOWSUB}" />
      <arg value="glossary.collection=urn:x-twograves:glossary" />
      <arg value="glossterm.auto.link=1" />
      <arg value="glossary.sort=1" />
      <arg value="generate.index=0" />
    </java>

    <if>
      <equals arg1="yes" arg2="${draft}" />
      <then>
        <copy file="${lib}/${lib.docbook.stylesheets}/images/draft.png"
              todir="${outputdir}/${outputdir.epub}/${toplevelBookName}/OEBPS/" />
      </then>
    </if>

    <copy file="${src}/${src.epub.cssfiledir}/${src.epub.cssfile}"
          todir="${outputdir}/${outputdir.epub}/${toplevelBookName}/OEBPS" />

    <xslt style="${lib}/epub-get-assets.xsl"
          in="${outputdir}/${outputdir.docbook}/${toplevelBookName}/${toplevelBookName}.xml"
          out="${outputdir}/${outputdir.epub}/tmp/${toplevelBookName}/assets.txt"
          force="true" />

    <loadfile property="assetsfile"
              srcfile="${outputdir}/${outputdir.epub}/tmp/${toplevelBookName}/assets.txt" />

    <for param="line" list="${assetsfile}" delimiter="${line.separator}">
      <sequential>
        <get src="@{line}" dest="${outputdir}/${outputdir.epub}/${toplevelBookName}/OEBPS/" />
      </sequential>
    </for>

    <zip basedir="${outputdir}/${outputdir.epub}/${toplevelBookName}/"
         destfile="${outputdir}/${outputdir.epub}/${toplevelBookName}/${toplevelBookName}.epub"
         compress="true" />
  </target>
  <target name="-clean.epub">
    <delete dir="${outputdir}/${outputdir.epub}/" />
  </target>

  <!-- ASCIIDOC -->
  <target name="-do-convert.asciidoc">
    <foreach target="-convert.asciidoc.one"
             param="toplevelBookName"
             list="${src.toplevel-books}"
             inheritall="true" />
  </target>

  <target name="-convert.asciidoc.one">
    <mkdir dir="${outputdir}/${outputdir.docbook}/${toplevelBookName}" />

    <java classpathref="asciidoctorj.classpath"
          failonerror="true"
          fork="true"
          classname="org.asciidoctor.cli.AsciidoctorInvoker">
      <arg value="-r" />
      <arg value="${basedir}/${lib}/asciidoctor_extensions.rb" />
      <arg value="-d" />
      <arg value="book" />
      <arg value="-b" />
      <arg value="docbook" />
      <arg value="-o" />
      <arg value="${outputdir}/${outputdir.docbook}/${toplevelBookName}/${toplevelBookName}.xml" />
      <arg value="${src}/${toplevelBookName}/${toplevelBookName}.txt" />
    </java>
  </target>

  <target name="-clean.docbook">
    <delete dir="${outputdir}/${outputdir.docbook}/" />
  </target>

  <!-- VALIDATION -->
  <target name="-do-validate">
    <antcall target="createschematronvalidationsheet" />
    <foreach target="-validate-one"
             param="toplevelBookName"
             list="${src.toplevel-books}"
             inheritall="true" />
  </target>

  <target name="createschematronvalidationsheet">
    <mkdir dir="${outputdir}/${outputdir.validation}" />

    <java classpathref="xslt1.classpath" failonerror="true" classname="com.icl.saxon.StyleSheet">
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
                   value="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                   value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
      <arg value="-o" />
      <arg value="${outputdir}/${outputdir.validation}/schematronvalidation.xsl" />
      <arg file="${lib}/${lib.docbook}/sch/docbook.sch" />
      <arg file="${lib}/${lib.schematron}/schematron-basic.xsl" />
    </java>
  </target>

  <target name="-validate-one">
    <mkdir dir="${outputdir}/${outputdir.validation}" />

    <java classpathref="xslt1.classpath"
          fork="true"
          failonerror="true"
          classname="com.thaiopensource.relaxng.util.Driver">
      <sysproperty key="javax.xml.parsers.DocumentBuilderFactory"
                   value="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
                   value="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                   value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
      <arg value="-C" />
      <arg value="${lib}/prepared_catalog.xml" />
      <arg value="-r" />
      <arg value="com.thaiopensource.resolver.catalog.XercesCatalogResolverFactoryImpl" />
      <arg file="${lib}/${lib.docbook}/rng/docbook.rng" />
      <arg file="${outputdir}/${outputdir.docbook}/${toplevelBookName}/${toplevelBookName}.xml" />
    </java>

    <java classpathref="xslt1.classpath"
          fork="true"
          failonerror="true"
          classname="com.icl.saxon.StyleSheet">
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
                   value="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                   value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
      <sysproperty key="xml.catalog.files" value="${lib}/prepared_catalog.xml" />
      <arg value="-r" />
      <arg value="org.apache.xml.resolver.tools.CatalogResolver" />
      <arg value="-x" />
      <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
      <arg value="-y" />
      <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
      <arg value="-o" />
      <arg value="${outputdir}/${outputdir.validation}/schematronerrors.txt" />
      <arg file="${outputdir}/${outputdir.docbook}/${toplevelBookName}/${toplevelBookName}.xml" />
      <arg file="${outputdir}/${outputdir.validation}/schematronvalidation.xsl" />
    </java>

    <fileset id="failure.file" file="${outputdir}/${outputdir.validation}/schematronerrors.txt">
      <size when="more" value="0" />
    </fileset>

    <echo />

    <if>
      <resourcecount when="greater" count="0" refid="failure.file" />
      <then>
        <echo>Schematron validation errors...</echo>
        <echo />
        <concat>
          <fileset refid="failure.file" />
        </concat>
        <fail message="Schematron validation errors..." />
      </then>
    </if>
  </target>
  <target name="-clean.validation">
    <delete dir="${outputdir}/${outputdir.validation}" />
  </target>

  <!-- RELEASE -->
  <target name="-do.release">
    <foreach target="-do.release-one"
             param="toplevelBookName"
             list="${src.toplevel-books}"
             inheritall="true" />
  </target>
  <target name="-do.release-one">
    <if>
      <os family="windows" />
      <then>
        <fail message="There's no CHANGELOG windows script yet. Soon!" />
      </then>
      <else>
        <exec resolveexecutable="true" executable="./make-changelog.sh">
          <arg value="src/${toplevelBookName}/CHANGELOG.md" />
          <arg value="src/${toplevelBookName}" />
          <arg value="${NOWSUB}" />
        </exec>
      </else>
    </if>
  </target>

  <!-- TIMESTAMPS -->
  <target name="-get-timestamp">
    <tstamp>
      <format property="NOW" pattern="yyyy-MM-dd'T'HH:mm:ss.SSSZ" timezone="UTC" />
    </tstamp>

    <propertyregex input="${NOW}" property="NOWSUB" regexp=".{2}$" replace=":\0" />

    <echo message="Current time for build detected as: ${NOWSUB}" />
  </target>

  <!-- PREPARATION -->
  <target name="-prepare.catalog">
    <property name="local-catalog-baseurl.absolutepath"
              location="${outputdir}/${outputdir.docbook}/common" />

    <xslt style="${lib}/prepare_catalog.xsl"
          in="${lib}/catalog.xml"
          out="${lib}/prepared_catalog.xml"
          force="true">
      <classpath refid="xslt2.classpath" />
      <factory name="net.sf.saxon.TransformerFactoryImpl" />
      <param name="local-catalog-baseurl" expression="${local-catalog-baseurl.absolutepath}/" />
    </xslt>
  </target>

  <target name="-prepare.glossary">
    <mkdir dir="${outputdir}/${outputdir.docbook}/common" />

    <java classpathref="asciidoctorj.classpath"
          failonerror="true"
          fork="true"
          classname="org.asciidoctor.cli.AsciidoctorInvoker">
      <arg value="-r" />
      <arg value="${basedir}/${lib}/asciidoctor_extensions.rb" />
      <arg value="-b" />
      <arg value="docbook" />
      <arg value="-d" />
      <arg value="glossary" />
      <arg value="-o" />
      <arg value="${outputdir}/${outputdir.docbook}/common/main_glossary.xml" />
      <arg value="${src}/common/main_glossary.txt" />
    </java>
  </target>
  <!-- END PRIVATE TARGETS -->
</project>
